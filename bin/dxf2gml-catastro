#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os
import sys
import json
import glob
import mimetypes
import http.client

from optparse import OptionParser

EPSG_DEFAULT = '25830'
EPSG_DICT = ['25828', '25829', '25830', '25831']


def post_multipart(host, selector, fields, files):
    """
    Post fields and files to an http host as multipart/form-data.
    fields is a sequence of (name, value) elements for regular form fields.
    files is a sequence of (name, filename, value) elements for data to be uploaded as files
    Return the server's response page.
    """
    content_type, body = encode_multipart_formdata(fields, files)
    h = http.client.HTTPConnection(host)
    h.putrequest('POST', selector)
    h.putheader('content-type', content_type)
    h.putheader('content-length', str(len(body)))
    h.endheaders()
    h.send(body)
    response = h.getresponse()

    return response.status, response.read()


def encode_multipart_formdata(fields, files):
    """
    fields is a sequence of (name, value) elements for regular form fields.
    files is a sequence of (name, filename, value) elements for data to be uploaded as files
    Return (content_type, body) ready for http.client.HTTP instance
    """
    BOUNDARY = '----------ThIs_Is_tHe_bouNdaRY_$'
    CRLF = b'\r\n'

    L = []
    for (key, value) in fields:
        L.append(f'--{BOUNDARY}')
        L.append(f'Content-Disposition: form-data; name="{key}"')
        L.append('')
        L.append(value)

    for (key, filename, value) in files:
        L.append(f'--{BOUNDARY}')
        L.append(f'Content-Disposition: form-data; name="{key}"; filename="{filename}"')
        L.append(f'Content-Type: {get_content_type(filename)}')
        L.append('')
        L.append(value)

    L.append(f'--{BOUNDARY}--')
    L.append('')
    L = map(lambda l: l if isinstance(l, bytes) else l.encode('utf-8'), L)
    body = CRLF.join(L)
    content_type = f'multipart/form-data; boundary={BOUNDARY}'

    return content_type, body


def get_content_type(filename):
    return mimetypes.guess_type(filename)[0] or 'application/octet-stream'


def convert(dxf_file, epsg, server):
    with open(dxf_file, 'rb') as f:
        content = f.read()

    status, response = post_multipart(
        server,
        "/catastro/json/",
        [("code", epsg)],
        [("dxf", dxf_file, content)]
    )

    if status != http.client.OK:
        print(f'Error processing file: {dxf_file}')
        print(response)
        return

    try:
        data = json.loads(response)
    except Exception as e:
        print(str(e))
        exit(1)

    gml_file, _ = os.path.splitext(dxf_file)
    gml_file += '.gml'
    with open(gml_file, 'wb') as f:
        f.write(bytes(data['gml'], encoding='utf-8'))

    print("-" * 40)
    for i in data['info']:
        print(i)

    print(f'Generated file: {gml_file}')


if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option(
        '-c', '--code',
        type='choice',
        action='store',
        dest='code',
        choices=EPSG_DICT,
        default=EPSG_DEFAULT,
        help='EPSG code',
    )

    parser.add_option(
        "-s", "--server",
        action="store",
        dest="server",
        default="localhost",
        help="dx2gml-catastro server",
    )

    options, args = parser.parse_args()

    print("EPSG code:", options.code)
    print("Server:", options.server)
    if len(args) == 0:
        print("No files or directories especified")
        exit(1)

    for _path in args:
        if os.path.isfile(_path):
            convert(_path, options.code, options.server)
        elif os.path.isdir(_path):
            for _file in glob.glob(os.path.join(_path, "*.dxf")):
                convert(_file, options.code, options.server)
        else:
            print(f"ERROR. File or directory not found '{path}'")
